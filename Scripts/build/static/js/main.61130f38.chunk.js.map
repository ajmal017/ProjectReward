{"version":3,"sources":["GraphElement.jsx","App.js","serviceWorker.js","index.js"],"names":["GraphElement","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","React","Component","App","_this","handleChange","event","value","target","name","formData","state","setState","triggerAPIResponse","data","console","log","Current_Price","Long_Premium","Long","Short_Premium","Short","maxReward","maxRisk","rR_Ratio","graphIsVisible","isLoading","handlePredictClick","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","response","json","handleCancelClick","Stock","selectDate","selectFlag","selectType","xaxis","yaxis","result","Container_default","className","Form_default","Row","Group","as","Col","Label","Control","type","placeholder","onChange","Row_default","Col_default","Button_default","block","variant","disabled","onClick","style","height","width","main","columnDefs","headerName","field","rowData","sv","src_GraphElement","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61130f38.chunk.js","sourcesContent":["import React from 'react';\n\nclass GraphElement extends React.Component {\n  constructor(props){\n    super(props);\n  }\n  render() {\n    return <div>\n              GraphElement\n            </div>\n  }\n}\n\nexport default GraphElement;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport GraphElement from './GraphElement';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      formData: {\n        Stock: '',\n        selectDate: 1,\n        selectFlag: 1,\n        selectType: 1\n      },\n      Current_Price: 0 ,\n      Long_Premium : 0,\n      Long : 0,\n      Short_Premium :0,\n      Short : 0,\n      maxReward: 0,\n      maxRisk:0,\n      rR_Ratio :0,\n      xaxis: [],\n      yaxis: [],\n      graphIsVisible: false\n    };\n  }\n\n  handleChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    var formData = this.state.formData;\n    formData[name] = value;\n    this.setState({\n      formData\n    });\n  }\n  triggerAPIResponse = (data) => {\n    console.log(data)\n    this.setState({\n      Current_Price: data['Current Price'],\n      Long_Premium : data['Long Premium'],\n      Long : data['Long(Buy)'],\n      Short_Premium :data['Short Premium'],\n      Short :  data['Short(Sell)'],\n      maxReward: data['maxReward'],\n      maxRisk:data['maxRisk'],\n      rR_Ratio :data['Risk/Reward Ratio'],\n      graphIsVisible: true,\n      isLoading: false\n    })\n  }\n  handlePredictClick = (event) => {\n    const formData = this.state.formData;\n    this.setState({ isLoading: true });\n    // debugger;\n    // debugger;\n    fetch('/api/spread/basic_spreads',\n      {\n        method: 'POST',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      })\n      .then(response => response.json()).then(data => {\n        this.triggerAPIResponse(data);\n        // this.setState({\n        //   result: JSON.stringify(data),\n        //   isLoading: false\n        // });\n      });\n  }\n\n  handleCancelClick = (event) => {\n    this.setState({ \n       formData: {\n        Stock: '',\n        selectDate: 1,\n        selectFlag: 1,\n        selectType: 1\n\n      },\n      Current_Price: 0 ,\n      Long_Premium : 0,\n      Long : 0,\n      Short_Premium :0,\n      Short : 0,\n      maxReward: 0,\n      maxRisk:0,\n      rR_Ratio :0,\n      xaxis: [],\n      yaxis: [],\n      graphIsVisible: false\n    });\n  }\n\n  render() {\n    const isLoading = this.state.isLoading;\n    const formData = this.state.formData;\n    const result = this.state.result;\n\n\n    return (\n      <Container>\n        <div>\n          <h1 className=\"title\">Welcome to Project Reward</h1>\n        </div>\n        <div className=\"content\">\n          <Form>\n            <Form.Row>\n              <Form.Group as={Col}>\n                <Form.Label>Stock:</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"AAPL\"\n                  name=\"Stock\"\n                  value={formData.Stock}\n                  onChange={this.handleChange} />\n              </Form.Group>\n              <Form.Group as={Col}>\n                <Form.Label>Expiry Date</Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  value={formData.selectDate}\n                  name=\"selectDate\"\n                  onChange={this.handleChange}>\n                  <option>Please Select</option>\n                  <option>2020-10-02</option>\n                  <option>2020-12-18</option>\n                  <option>2021-01-15</option>\n                  <option>2021-02-19</option>\n                  <option>2021-03-19</option>\n                  <option>2021-06-18</option>\n                </Form.Control>\n              </Form.Group>\n            </Form.Row>\n\n            <Form.Row>\n              <Form.Group as={Col}>\n                <Form.Label>Option Type</Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  value={formData.selectFlag}\n                  name=\"selectFlag\"\n                  onChange={this.handleChange}>\n                  <option>Please Select</option>\n                  <option>calls</option>\n                  <option>puts</option>\n                </Form.Control>\n              </Form.Group>\n              <Form.Group as={Col}>\n                <Form.Label>Spread Type</Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  value={formData.selectType}\n                  name=\"selectType\"\n                  onChange={this.handleChange}>\n                  <option>Please Select</option>\n                  <option>credit</option>\n                  <option>debit</option>\n                </Form.Control>\n              </Form.Group>\n\n            </Form.Row>\n            <Row>\n              <Col>\n                <Button\n                  block\n                  variant=\"success\"\n                  disabled={isLoading}\n                  onClick={!isLoading ? this.handlePredictClick : null}>\n                  { isLoading ? 'Fetching Suggestions' : 'Suggest' }\n                </Button>\n              </Col>\n              {this.state.Current_Price === 0 ? null :\n        (<Row>\n          <Col className=\"result-container\">\n               <div\n        className=\"ag-theme-alpine\"\n        style={{\n        height: '400px',\n        width: '390px' }}\n      > {\"\\n\"}\n        <AgGridReact\n          columnDefs={[{\n        headerName: \"Field\", field: \"field\"\n      }, {\n        headerName: \"Value\", field: \"sv\"\n      }]}\n          rowData={[{\n        field: \"Current Price\", sv: this.state.Current_Price},\n        {field: \"Long(Buy)\", sv: this.state.Long},\n        {field: \"Long Premium\", sv: this.state.Long_Premium},\n        {field: \"Short(Sell)\", sv: this.state.Short},\n        {field: \"Short Premium\", sv: this.state.Short_Premium},\n        {field: \"Maximum Risk\", sv: this.state.maxRisk},\n        {field: \"Maximum Reward\", sv: this.state.maxReward},\n        {field: \"Risk/Reward Ratio\", sv: this.state.rR_Ratio}]}> \n        </AgGridReact>\n      </div>\n        </Col>\n            </Row>)\n          }\n              <Col>\n                <Button\n                  block\n                  variant=\"danger\"\n                  disabled={isLoading}\n                  onClick={this.handleCancelClick}>\n                  Reset\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n          {this.state.graphIsVisible ? <GraphElement xaxis={this.state.xaxis} yaxis={this.state.yaxis}/> : \"\"}\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}